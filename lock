#!/bin/bash
start_t=$(date +%s%N);
start_t=$(expr $start_t / 1000000);

start=$(date +%s%N);
start=$(expr $start / 1000000);

FOLDER=`dirname "$BASH_SOURCE"`
PARAMS=""
ICON="$FOLDER/icons/lock.png"

set -o pipefail
trap 'rm -f "${images[*]}"' EXIT
set -o errexit -o noclobber -o nounset

FOLDER=`dirname "$BASH_SOURCE"`

# define locker command
swaylock_cmd="swaylock"

# Need these to capture multiple monitors' screenshots
declare -a outputs
declare -a images


# parse the json swaymsg for outputs via jq and filter for active monitors
poutputs=$(swaymsg -t get_outputs | jq -r '.[]  | select(.active == true) | .name')
while read -r line; do
    outputs+=($line)
    images+=($(mktemp --suffix=.png))
done <<< "$poutputs"

end=$(date +%s%N);
end=$(expr $end / 1000000);
echo Time detect displays: `expr $end - $start`



indicator_params=("--indicator-radius" "85")
output_params=""

arraylen=${#outputs[@]}
for (( i=0; i<${arraylen}; i++ ));
do
	start=$(date +%s%N);
	start=$(expr $start / 1000000);

    # Take screenshot
    command -- "grim" -o "${outputs[$i]}" "${images[$i]}"
    
	end=$(date +%s%N);
	end=$(expr $end / 1000000);
	echo Time grim output "$i": `expr $end - $start`
 
    
    output_params+=("-i" "${outputs[$i]}:${images[$i]}" "-K")
    
    start=$(date +%s%N);
	start=$(expr $start / 1000000);

    # Encrypt
    python3 $FOLDER/encrypt.py --ecb "${images[$i]}" "${images[$i]}"
   
    end=$(date +%s%N);
	end=$(expr $end / 1000000);
	echo Time encrypt image "$i": `expr $end - $start`

	start=$(date +%s%N);
	start=$(expr $start / 1000000);

   # 
   	# Pixelate and add lock icon
   	convert "${images[$i]}[10%]" '-sample' '1000%' -level "10%,90%" "$ICON" -gravity center -composite "${images[$i]}"
	end=$(date +%s%N);
	end=$(expr $end / 1000000);
	echo Time convert image "$i": `expr $end - $start`
        
    
done

end=$(date +%s%N);
end=$(expr $end / 1000000);
echo Time total: `expr $end - $start_t`

# try to use swaylock with prepared parameters
if ! "${swaylock_cmd}" "${indicator_params[@]}" "${output_params[@]}" >/dev/null 2>&1; then
    # We have failed, lets get back to stock one
    "${swaylock_cmd[@]}"
fi



